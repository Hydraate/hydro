//
//                 __  __            __           
//                / / / /__  __ ____/ /_____ ____ 
//               / /_/ // / / // __  // ___// __ \
//              / __  // /_/ // /_/ // /   / /_/ /
//             /_/ /_/ \__, / \__,_//_/    \____/ 
//                    /____/                      
//
//              The Hydro Programming Language
//

#ifndef __h3o_engine_Entity__
#define __h3o_engine_Entity__

#include <list>
#include <string>

#include "Attribute.hpp"
#include "WhileBinding.hpp"
#include "WhenBinding.hpp"
#include "Identity.hpp"
#include "Node.hpp"
#include "RelationshipBinding.hpp"
#include "PDocumentContext.hpp"

namespace hydro::engine
{

/**
 * The Entity class is the abstract base class for all entity types.
 */
class Entity : public Node
{
protected:
    /**
     * Creates an Entity object as root. This constructor is reserved for iDocument objects.
     */
    Entity();

    /**
     * Creates an Entity object as a child of a parent entity.
     */
    Entity(Entity *parent, Identity *identity);

public:
    /**
     * Frees encapsulated resources generated by the entity and destroys all children.
     */
    virtual ~Entity();
    
    /**
     * Appends an attribute node to this entity.
     * @param attr The attribute node.
     */
    void appendAttribute(Attribute *attr);
    
    /**
     * Appends a when binding to the entity.
     * @param binding The when binding.
     */
    void appendBinding(WhenBinding *binding);

    /**
     * Appends a while binding to the entity.
     * @param binding The while binding.
     */
    void appendBinding(WhileBinding *binding);

    /**
     * Gets the identity associated with this entity.
     * @return Returns the Identity object that describes the entity. Will return null if the entity is the document root.
     */
    Identity *getIdentity() const { return mIdentity; }

    /**
     * Gets the list of attributes that are contained within this entity node.
     * @return Returns a constant reference to the list of attributes.
     */
    const std::list<Attribute *> &attributes() const { return mAttributes; }

    /**
     * Accepts a visitor allowing the visitor to visit this node.
     * @param visitor The visitor in which to accept.
     */
    //virtual void accept(NodeVisitor *visitor) = 0;

    /**
     * Gets the node that is the top-most ancestor to this node.
     * @returns Returns the root Node that owns the Entity object. This is normally a pointer to the iDocument instance that owns the node but not always.
     */
    Entity *getRoot() const { return mRoot; }

    /**
     * Returns a the list containing all child nodes belonging to this nodes.
     * @return Returns a constant reference to the list of child nodes.
     */
    const std::list<Entity *> &children() const { return mChildren; }

    /**
     * Gets the node's parent node.
     * @return Returns the parent Node for this Node object.
     */
    Entity *getParent() const { return mParent; }
    
    /**
     * Gets the context that this entity owns.
     */
    PDocumentContext *getContext() const { return mContext; }
    
    /**
     * Returns the child index of this entity.
     * @return Returns the zero based child index for the Entity object relative to its parent entity.
     */
    int32_t getChildIndex() const { return mChildIndex; }

    /**
     * Returns the number of children contained within this entity.
     * @return Returns the quantity of child entities belonging to the Entity object.
     */
    uint32_t numChildren() const { return (uint32_t)mChildren.size(); }

private:
    /**
     * The Identity instance assigned to this entity.
     */
    Identity *mIdentity;

    /**
     * A list of attributes that belong to this entity.
     */
    std::list<Attribute *> mAttributes;

    /**
     * A list of relationships bindings that binds this entity to some ancestor.
     */
    std::list<RelationshipBinding *> mRelationshipBindings;
    
    /**
     * A list of when and while bindings.
     */
    std::list<Binding *> mBindings;
    
    /**
     * The entity object that is the top most node in the tree.
     */
    Entity *mRoot;

    /**
     * The parent node that contains this node.
     */
    Entity *mParent;
    
    /**
     * The context owned by this entity.
     */
    PDocumentContext *mContext;

    /**
     * A list of child entity nodes that are contained within this node.
     */
    std::list<Entity *> mChildren;

    /**
     * The zero based index of this node in relation to it's parent. When the child index is -1, the child does not have a parent.
     */
    int32_t mChildIndex;

    /**
     * Binds an entity node as a child to this entity.
     * @param child The entity in which to bind as a child.
     */
    void appendChild(Entity *child);

    /**
     * Determines the root node and stores a reference to the node.
     */
    void computeRoot();

    /**
     * Generates relationship bindings for parents.
     */
    void computeRelationships();
};

} // namespace hydro::engine

#endif /* __h3o_engine_Entity__ */
